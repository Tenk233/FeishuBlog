<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.feishu.blog.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.feishu.blog.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="phone" jdbcType="CHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="role" jdbcType="CHAR" property="role" />
    <result column="password_hash" jdbcType="VARCHAR" property="passwordHash" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, phone, email, `role`, password_hash, salt
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.feishu.blog.model.User" useGeneratedKeys="true">
    insert into tb_user (username, phone, email, 
      `role`, password_hash, salt
      )
    values (#{username,jdbcType=VARCHAR}, #{phone,jdbcType=CHAR}, #{email,jdbcType=VARCHAR}, 
      #{role,jdbcType=CHAR}, #{passwordHash,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.feishu.blog.model.User" useGeneratedKeys="true">
    insert into tb_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="passwordHash != null">
        password_hash,
      </if>
      <if test="salt != null">
        salt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=CHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=CHAR},
      </if>
      <if test="passwordHash != null">
        #{passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.feishu.blog.model.User">
    update tb_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=CHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=CHAR},
      </if>
      <if test="passwordHash != null">
        password_hash = #{passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.feishu.blog.model.User">
    update tb_user
    set username = #{username,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=CHAR},
      email = #{email,jdbcType=VARCHAR},
      `role` = #{role,jdbcType=CHAR},
      password_hash = #{passwordHash,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectAllUsers" resultMap="BaseResultMap">
    SELECT
      id,
      username,
      phone,
      email,
      `role`,
      password_hash,
      salt
    FROM tb_user
  </select>
  <select id="selectAllUsersPaged" resultMap="BaseResultMap">
    SELECT
      id,
      username,
      phone,
      email,
      `role`,
      password_hash,
      salt
    FROM tb_user
           LIMIT #{offset}, #{pageSize}
  </select>
  <select id="selectUserByUsername" resultMap="BaseResultMap">
    SELECT
      id,
      username,
      phone,
      email,
      `role`,
      password_hash,
      salt
    FROM tb_user
    WHERE username=#{username}
  </select>
  <select id="selectUserByEmail" resultMap="BaseResultMap">
    SELECT
      id,
      username,
      phone,
      email,
      `role`,
      password_hash,
      salt
    FROM tb_user
    WHERE email=#{email}
  </select>
</mapper>